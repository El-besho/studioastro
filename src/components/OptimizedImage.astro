---
// Optimized Image Component with WebP support and responsive images
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  sizes?: string;
  loading?: 'lazy' | 'eager';
  class?: string;
  priority?: boolean;
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
}

const { 
  src, 
  alt, 
  width, 
  height, 
  sizes = '100vw',
  loading = 'lazy',
  class: className = '',
  priority = false,
  objectFit = 'cover'
} = Astro.props;

// Generate srcset for responsive images
function generateSrcSet(baseSrc: string) {
  const ext = baseSrc.match(/\.(jpg|jpeg|png|webp)$/i)?.[1];
  if (!ext) return '';
  
  const baseUrl = baseSrc.replace(/\.(jpg|jpeg|png|webp)$/i, '');
  const sizeSuffixes = ['small', 'medium', 'large', 'xlarge'];
  const sizeWidths = [400, 800, 1200, 1920];
  
  const srcsetEntries = sizeSuffixes.map((suffix, index) => {
    return `${baseUrl}-${suffix}.webp ${sizeWidths[index]}w`;
  });
  
  // Add original
  srcsetEntries.push(`${baseUrl}.webp 2400w`);
  
  return srcsetEntries.join(', ');
}

// Generate fallback srcset for non-WebP
function generateFallbackSrcSet(baseSrc: string) {
  const ext = baseSrc.match(/\.(jpg|jpeg|png)$/i)?.[1];
  if (!ext) return '';
  
  const baseUrl = baseSrc.replace(/\.(jpg|jpeg|png)$/i, '');
  const sizeSuffixes = ['small', 'medium', 'large', 'xlarge'];
  const sizeWidths = [400, 800, 1200, 1920];
  
  const srcsetEntries = sizeSuffixes.map((suffix, index) => {
    return `${baseUrl}-${suffix}.${ext} ${sizeWidths[index]}w`;
  });
  
  // Add original
  srcsetEntries.push(`${baseSrc} 2400w`);
  
  return srcsetEntries.join(', ');
}

const webpSrc = src.replace(/\.(jpg|jpeg|png)$/i, '.webp');
const webpSrcSet = generateSrcSet(src);
const fallbackSrcSet = generateFallbackSrcSet(src);

// Determine aspect ratio for placeholder
const aspectRatio = width && height ? `${width}/${height}` : 'auto';
---

<picture class={`optimized-image-wrapper ${className}`}>
  <!-- WebP sources -->
  <source
    type="image/webp"
    srcset={webpSrcSet || webpSrc}
    sizes={sizes}
  />
  
  <!-- Fallback sources -->
  {fallbackSrcSet && (
    <source
      type={src.includes('.png') ? 'image/png' : 'image/jpeg'}
      srcset={fallbackSrcSet}
      sizes={sizes}
    />
  )}
  
  <!-- Fallback img -->
  <img
    src={src}
    alt={alt}
    loading={priority ? 'eager' : loading}
    decoding={priority ? 'sync' : 'async'}
    class={`optimized-image ${className}`}
    width={width}
    height={height}
    fetchpriority={priority ? 'high' : 'auto'}
    style={`object-fit: ${objectFit}; aspect-ratio: ${aspectRatio};`}
  />
</picture>

<style>
  .optimized-image-wrapper {
    display: block;
    position: relative;
    overflow: hidden;
  }
  
  .optimized-image {
    display: block;
    max-width: 100%;
    height: auto;
    background-color: #f3f4f6;
  }
  
  /* Blur-up effect for lazy loading */
  .optimized-image[loading="lazy"] {
    filter: blur(5px);
    transition: filter 0.3s;
  }
  
  .optimized-image.loaded {
    filter: blur(0);
  }
</style>

<script>
  // Add loaded class when image loads
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.optimized-image[loading="lazy"]');
    
    images.forEach(img => {
      if (img.complete) {
        img.classList.add('loaded');
      } else {
        img.addEventListener('load', () => {
          img.classList.add('loaded');
        });
      }
    });
  });
</script>